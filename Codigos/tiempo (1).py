# -*- coding: utf-8 -*-
"""TIempo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BnrQM2urj8P4WGxYUqQX0XraglHfO_RW

## **Dependencias**
"""

!pip install --upgrade pip
!pip install onnx
!pip install onnxruntime
!pip install torch torchvision
!pip install opencv-python

!pip uninstall numpy -y
!pip uninstall pandas -y

!pip install numpy==1.23.5
!pip install pandas==2.0.3

"""## **Tiempo de inferencia de pt**"""

import torch
import time
import cv2

# Cargar el modelo YOLOv5 personalizado
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/best.pt').eval()

# Imagen de prueba
image_path = '/content/calle-clima-autos-avenida.jpg'
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Redimensionar la imagen al tamaño esperado por el modelo
input_size = 640
image_resized = cv2.resize(image_rgb, (input_size, input_size))

# Convertir imagen a tensor y normalizar
image_tensor = torch.tensor(image_resized).permute(2, 0, 1).float() / 255.0

# Medir tiempo de inferencia
start_time = time.time()
with torch.no_grad():
    results = model(image_tensor.unsqueeze(0))
inference_time = time.time() - start_time

print(f'Tiempo de inferencia en YOLOv5: {inference_time:.4f} segundos')

"""## **Tiempo de inferencia de onnx**"""

import onnxruntime as ort
import numpy as np
import time
import cv2

# Ruta del modelo ONNX
model_path = '/content/best.onnx'

# Inicializar ONNX Runtime
session = ort.InferenceSession(model_path)

# Imagen de prueba
image_path = '/content/calle-clima-autos-avenida.jpg'
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.resize(image, (640, 640))

# Preprocesar imagen
image = image.astype(np.float32) / 255.0
image = np.transpose(image, (2, 0, 1))
image = np.expand_dims(image, axis=0)

# Crear input
input_name = session.get_inputs()[0].name
input_tensor = {input_name: image}

# Medir tiempo de inferencia
start_time = time.time()
outputs = session.run(None, input_tensor)
end_time = time.time()

inference_time = end_time - start_time
print(f'Tiempo de inferencia en ONNX: {inference_time:.4f} segundos')

import onnxruntime as ort
import numpy as np
import time
import cv2

# Ruta del modelo ONNX
model_path = '/content/best.onnx'

# Inicializar ONNX Runtime
session = ort.InferenceSession(model_path)

# Imagen de prueba
image_path = '/content/calle-clima-autos-avenida.jpg'
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.resize(image, (640, 640))

# Preprocesar imagen
image = image.astype(np.float32) / 255.0
image = np.transpose(image, (2, 0, 1))
image = np.expand_dims(image, axis=0)

# Crear input
input_name = session.get_inputs()[0].name
input_tensor = {input_name: image}

# Medir tiempo de inferencia
start_time = time.time()
outputs = session.run(None, input_tensor)
end_time = time.time()

inference_time = end_time - start_time
print(f'Tiempo de inferencia en ONNX: {inference_time:.4f} segundos')

import torch
import time
import cv2

# Cargar el modelo YOLOv5 personalizado
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/best.pt').eval()

# Imagen de prueba
image_path = '/content/calle-clima-autos-avenida.jpg'
image = cv2.imread(image_path)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Redimensionar la imagen al tamaño esperado por el modelo
input_size = 640
image_resized = cv2.resize(image_rgb, (input_size, input_size))

# Convertir imagen a tensor y normalizar
image_tensor = torch.tensor(image_resized).permute(2, 0, 1).float() / 255.0

# Medir tiempo de inferencia
start_time = time.time()
with torch.no_grad():
    results = model(image_tensor.unsqueeze(0))
inference_time = time.time() - start_time

print(f'Tiempo de inferencia en YOLOv5: {inference_time:.4f} segundos')